#9-1. Restaurant: Make a class called Restaurant . The __init__() method for Restaurant should store two attributes: a restaurant_name and a cuisine_type . Make a method called describe_restaurant() that prints these two pieces of information, and a method called open_restaurant() that prints a message indi- cating that the restaurant is open . Make an instance called restaurant from your class . Print the two attri- butes individually, and then call both methods.
class Restaurant:
  def __init__(self, restaurant_name, cusine_name):
    """Initialize name and cusine type attributes."""
    self.restaurant_name = restaurant_name
    self.age = __package__

  def desctibe_restaurant(self):
    """Prints the name and age of the restaurant."""
    print(f"Restaurant Name: {self.restaurant_name}")
    print(f"Cusine Type: {self.cusine_type}")

  def open_restaurant(self):
    print("The restaurant is open")

#9-2. Three Restaurants: Start with your class from Exercise 9-1 .Create three different instances from the class, and call describe_restaurant() for each instance.
    # Reusing the Restaurant class from Exercise 9-1
class Restaurant:
  def __init__(self, restaurant_name, cuisine_type):
    self.restaurant_name = restaurant_name
    self.cuisine_type = cuisine_type

  def describe_restaurant(self):
    print(f"Restaurant Name: {self.restaurant_name}")
    print(f"Cuisine Type: {self.cuisine_type}")

  # Creating three different instances from the Restaurant class
restaurant1 = Restaurant("Ristorante Italiano", "Italian Cuisine")
restaurant2 = Restaurant("Café Paris", "French Cuisine")
restaurant3 = Restaurant("Tokyo Sushi Bar", "Japanese Cuisine")

  # Calling describe_restaurant() for each instance
restaurant1.describe_restaurant()
restaurant2.describe_restaurant()
restaurant3.describe_restaurant()
  
#9-3. Users: Make a class called User. Create two attributes called first_name and last_name, and then create several other attributes that are typically stored in a user profile . Make a method called describe_user() that prints a summary of the user’s information. Make another method called greet_user() that prints a personalized greeting to the user .Create several instances representing different users, and call both methods for each user.
class User:
  def __init__(self, first_name, last_name, age, location):
    self.first_name = first_name
    self.last_name = last_name
    self.age = age
    self.location = location

  def describe_user(self):
    print(f"User: {self.first_name} {self.last_name}")
    print(f"Age: {self.age}")
    print(f"Location: {self.location}")

  def greet_user(self):
    print(f"Hello, {self.first_name}! Welcome back.")

# Creating instances representing different users
user1 = User("Alice", "Smith", 25, "New York")
user2 = User("Bob", "Johnson", 30, "Los Angeles")
user3 = User("Eve", "Brown", 35, "Chicago")

# Calling both methods for each user
user1.describe_user()
user1.greet_user()

user2.describe_user()
user2.greet_user()

user3.describe_user()
user3.greet_user()

#9-4. Number Served: Start with your program from Exercise 9-1 (page 166) . Add an attribute called number_served with a default value of 0 . Create an instance called restaurant from this class . Print the number of customers the restaurant has served, and then change this value and print it again .Add a method called set_number_served() that lets you set the number of customers that have been served . Call this method with a new number and print the value again .Add a method called increment_number_served() that lets you increment the number of customers who’ve been served . Call this method with any num- ber you like that could represent how many customers were served in, say, a day of business .
# Reusing the Restaurant class from previous exercises and adding the Number Served functionality
class Restaurant:
  def __init__(self, restaurant_name, cuisine_type):
    self.restaurant_name = restaurant_name
    self.cuisine_type = cuisine_type
    self.number_served = 0

  def describe_restaurant(self):
    print(f"Restaurant Name: {self.restaurant_name}")
    print(f"Cuisine Type: {self.cuisine_type}")

  def open_restaurant(self):
    print("The restaurant is open.")

  def set_number_served(self, number):
    self.number_served = number

  def increment_number_served(self, increment):
    self.number_served += increment

# Creating an instance called "restaurant" from the Restaurant class
restaurant = Restaurant("La Bonne Vie", "French Cuisine")

# Printing the initial number of customers served
print(f"Number of customers served: {restaurant.number_served}")

# Setting the number of customers served and printing the value again
restaurant.set_number_served(50)
print(f"Number of customers served: {restaurant.number_served}")

# Incrementing the number of customers served and printing the value again
restaurant.increment_number_served(20)
print(f"Number of customers served: {restaurant.number_served}")

#9-5. Login Attempts: Add an attribute called login_attempts to your User class from Exercise 9-3 (page 166) . Write a method called increment_ login_attempts() that increments the value of login_attempts by 1 . Write another method called reset_login_attempts() that resets the value of login_ attempts to 0 .Make an instance of the User class and call increment_login_attempts() several times . Print the value of login_attempts to make sure it was incremented properly, and then call reset_login_attempts() . Print login_attempts again to make sure it was reset to 0 .
class User:
  def __init__(self, first_name, last_name, age, location):
      self.first_name = first_name
      self.last_name = last_name
      self.age = age
      self.location = location
      self.login_attempts = 0

  def describe_user(self):
      print(f"User: {self.first_name} {self.last_name}")
      print(f"Age: {self.age}")
      print(f"Location: {self.location}")

  def greet_user(self):
      print(f"Hello, {self.first_name}! Welcome back.")

  def increment_login_attempts(self):
      self.login_attempts += 1

  def reset_login_attempts(self):
      self.login_attempts = 0

# Creating an instance of the User class
user = User("John", "Doe", 30, "New York")

# Incrementing login attempts several times
user.increment_login_attempts()
user.increment_login_attempts()
user.increment_login_attempts()

# Printing the value of login_attempts
print(f"Login Attempts: {user.login_attempts}")

# Resetting login_attempts and checking
user.reset_login_attempts()
print(f"Login Attempts after reset: {user.login_attempts}")

#9-6. Ice Cream Stand: An ice cream stand is a specific kind of restaurant . Write a class called IceCreamStand that inherits from the Restaurant class you wrote in Exercise 9-1 (page 166) or Exercise 9-4 (page 171) . Either version of the class will work; just pick the one you like better . Add an attribute called flavors that stores a list of ice cream flavors . Write a method that displays these flavors . Create an instance of IceCreamStand, and call this method .

# Reusing the Restaurant class from Exercise 9-1
class Restaurant:
    def __init__(self, restaurant_name, cuisine_type):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type

    def describe_restaurant(self):
        print(f"Restaurant Name: {self.restaurant_name}")
        print(f"Cuisine Type: {self.cuisine_type}")

# Creating IceCreamStand class that inherits from Restaurant class
class IceCreamStand(Restaurant):
    def __init__(self, restaurant_name, cuisine_type, flavors):
        super().__init__(restaurant_name, cuisine_type)
        self.flavors = flavors

    def display_flavors(self):
        print("Available Ice Cream Flavors:")
        for flavor in self.flavors:
            print(flavor)

# Creating an instance of IceCreamStand
ice_cream_stand = IceCreamStand("Sweet Scoops", "Ice Cream", ["Vanilla", "Chocolate", "Strawberry", "Mint"])

# Calling the method to display flavors
ice_cream_stand.display_flavors()

#9-7. Admin: An administrator is a special kind of user . Write a class called Admin that inherits from the User class you wrote in Exercise 9-3 (page 166) or Exercise 9-5 (page 171) . Add an attribute, privileges, that stores a list of strings like "can add post", "can delete post", "can ban user", and so on . Write a method called show_privileges() that lists the administrator’s set of privileges . Create an instance of Admin, and call your method .

class User:
  def __init__(self, first_name, last_name, age, location):
      self.first_name = first_name
      self.last_name = last_name
      self.age = age
      self.location = location

  def describe_user(self):
      print(f"User: {self.first_name} {self.last_name}")
      print(f"Age: {self.age}")
      print(f"Location: {self.location}")

  def greet_user(self):
      print(f"Hello, {self.first_name}! Welcome back.")

class Admin(User):
  def __init__(self, first_name, last_name, age, location, privileges):
      super().__init__(first_name, last_name, age, location)
      self.privileges = privileges

  def show_privileges(self):
      print("Admin Privileges:")
      for privilege in self.privileges:
          print(privilege)

# Creating an instance of Admin and calling the show_privileges method
admin = Admin("Admin", "User", 40, "Admin City", ["can add post", "can delete post", "can ban user"])
admin.show_privileges()

# 9-8. Privileges: Write a separate Privileges class . The class should have one attribute, privileges, that stores a list of strings as described in Exercise 9-7 . Move the show_privileges() method to this class . Make a Privileges instance as an attribute in the Admin class . Create a new instance of Admin and use your method to show its privileges .
class Privileges:
  def __init__(self, privileges):
      self.privileges = privileges

  def show_privileges(self):
      print("Admin Privileges:")
      for privilege in self.privileges:
          print(privilege)

class User:
  def __init__(self, first_name, last_name, age, location):
      self.first_name = first_name
      self.last_name = last_name
      self.age = age
      self.location = location

  def describe_user(self):
      print(f"User: {self.first_name} {self.last_name}")
      print(f"Age: {self.age}")
      print(f"Location: {self.location}")

  def greet_user(self):
      print(f"Hello, {self.first_name}! Welcome back.")

class Admin(User):
  def __init__(self, first_name, last_name, age, location, privileges):
      super().__init__(first_name, last_name, age, location)
      self.privileges_instance = Privileges(privileges)

# Creating an instance of Admin and calling the show_privileges method through Privileges instance
admin = Admin("Admin", "User", 40, "Admin City", ["can add post", "can delete post", "can ban user"])
admin.privileges_instance.show_privileges()

# 9-9. Battery Upgrade: Use the final version of electric_car.py from this section . Add a method to the Battery class called upgrade_battery() . This method should check the battery size and set the capacity to 85 if it isn’t already . Make an electric car with a default battery size, call get_range() once, and then call get_range() a second time after upgrading the battery . You should see an increase in the car’s range .

class Battery:
  def __init__(self, battery_size=75):
      self.battery_size = battery_size

  def describe_battery(self):
      print(f"This car has a {self.battery_size}-kWh battery.")

  def get_range(self):
      if self.battery_size == 75:
          range = 260
      elif self.battery_size == 85:
          range = 300
      message = f"This car can go approximately {range} miles on a full charge."
      print(message)

  def upgrade_battery(self):
      if self.battery_size != 85:
          self.battery_size = 85
          print("Battery upgraded to 85 kWh.")

class ElectricCar:
  def __init__(self, make, model, year):
      self.make = make
      self.model = model
      self.year = year
      self.battery = Battery()

# Creating an electric car
my_electric_car = ElectricCar("Tesla", "Model S", 2022)

# Getting the initial range
my_electric_car.battery.get_range()

# Upgrading the battery and getting the new range
my_electric_car.battery.upgrade_battery()
my_electric_car.battery.get_range()

#9-10. Imported Restaurant: Using your latest Restaurant class, store it in a mod- ule . Make a separate file that imports Restaurant . Make a Restaurant instance, and call one of Restaurant’s methods to show that the import statement is work- ing properly .

class Restaurant:
  def __init__(self, restaurant_name, cuisine_type):
      self.restaurant_name = restaurant_name
      self.cuisine_type = cuisine_type

  def describe_restaurant(self):
      print(f"Restaurant Name: {self.restaurant_name}")
      print(f"Cuisine Type: {self.cuisine_type}")

from restaurant import Restaurant

  # Creating an instance of Restaurant and calling the describe_restaurant method
restaurant = Restaurant("La Bonne Vie", "French Cuisine")
restaurant.describe_restaurant()

#9-11. Imported Admin: Start with your work from Exercise 9-8 (page 178) . Store the classes User, Privileges, and Admin in one module . Create a sepa- rate file, make an Admin instance, and call show_privileges() to show that everything is working correctly .
class Privileges:
  def __init__(self, privileges):
      self.privileges = privileges

  def show_privileges(self):
      print("Admin Privileges:")
      for privilege in self.privileges:
          print(privilege)

class User:
  def __init__(self, first_name, last_name, age, location):
      self.first_name = first_name
      self.last_name = last_name
      self.age = age
      self.location = location

  def describe_user(self):
      print(f"User: {self.first_name} {self.last_name}")
      print(f"Age: {self.age}")
      print(f"Location: {self.location}")

  def greet_user(self):
      print(f"Hello, {self.first_name}! Welcome back.")

class Admin(User):
  def __init__(self, first_name, last_name, age, location, privileges):
      super().__init__(first_name, last_name, age, location)
      self.privileges_instance = Privileges(privileges)

from user_admin import Admin

    # Creating an instance of Admin and calling the show_privileges method through Privileges instance
admin = Admin("Admin", "User", 40, "Admin City", ["can add post", "can delete post", "can ban user"])
admin.privileges_instance.show_privileges()

#9-12. Multiple Modules: Store the User class in one module, and store the Privileges and Admin classes in a separate module . In a separate file, create an Admin instance and call show_privileges() to show that everything is still working correctly .
from user_admin import Admin

# Creating an instance of Admin and calling the show_privileges method through Privileges instance
admin = Admin("Admin", "User", 40, "Admin City", ["can add post", "can delete post", "can ban user"])
admin.privileges_instance.show_privileges()

#9-13. OrderedDict Rewrite: Start with Exercise 6-4 (page 108), where you used a standard dictionary to represent a glossary . Rewrite the program using the OrderedDict class and make sure the order of the output matches the order in which key-value pairs were added to the dictionary .
from collections import OrderedDict

# Create an ordered dictionary to store the glossary terms and their meanings
glossary = OrderedDict()

# Adding key-value pairs to the ordered dictionary
glossary['variable'] = 'A placeholder for storing data.'
glossary['function'] = 'A named set of instructions that performs a specific task.'
glossary['loop'] = 'A programming structure that repeats a block of code until a certain condition is met.'

# Displaying the glossary terms and meanings in the order they were added
for term, definition in glossary.items():
    print(f"{term.title()}: {definition}")
#9-14. Dice: The module random contains functions that generate random num- bers in a variety of ways . The function randint() returns an integer in the range you provide . The following code returns a number between 1 and 6:
                  #from random import randint
                  #x = randint(1, 6)
  #Make a class Die with one attribute called sides, which has a default value of 6 . Write a method called roll_die() that prints a random number between 1 and the number of sides the die has . Make a 6-sided die and roll it 10 times . Make a 10-sided die and a 20-sided die . Roll each die 10 times .
from random import randint

class Die:
    def __init__(self, sides=6):
        self.sides = sides

    def roll_die(self):
        return randint(1, self.sides)

# Create a 6-sided die and roll it 10 times
six_sided_die = Die()
print("Rolling a 6-sided die 10 times:")
for _ in range(10):
    print(six_sided_die.roll_die())

# Create a 10-sided die and roll it 10 times
ten_sided_die = Die(sides=10)
print("\nRolling a 10-sided die 10 times:")
for _ in range(10):
    print(ten_sided_die.roll_die())

# Create a 20-sided die and roll it 10 times
twenty_sided_die = Die(sides=20)
print("\nRolling a 20-sided die 10 times:")
for _ in range(10):
    print(twenty_sided_die.roll_die())
  
#9-15. Python Module of the Week: One excellent resource for exploring the Python standard library is a site called Python Module of the Week . Go to http://pymotw.com/ and look at the table of contents . Find a module that looks interesting to you and read about it, or explore the documentation of the collections and random modules .
import collections

# Using the defaultdict class from collections module
student_scores = [('Alice', 90), ('Bob', 85), ('Alice', 95), ('Charlie', 88), ('Bob', 92)]

# Using defaultdict to calculate average scores
scores_dict = collections.defaultdict(list)
for name, score in student_scores:
    scores_dict[name].append(score)

average_scores = {name: sum(scores) / len(scores) for name, scores in scores_dict.items()}

# Printing the average scores
for name, avg_score in average_scores.items():
    print(f"{name}: Average score is {avg_score}")

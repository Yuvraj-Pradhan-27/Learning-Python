# 8-1. Message: Write a function called display_message() that prints one sen- tence telling everyone what you are learning about in this chapter . Call the function, and make sure the message displays correctly .
def display_message():
  """Display a message about what I'm learning."""
  msg = "I'm learning about functions in this chapter!"

  print(msg)

display_message()

# 8-2. Favorite Book: Write a function called favorite_book() that accepts one parameter, title . The function should print a message, such as One of my favorite books is Alice in Wonderland . Call the function, making sure to include a book title as an argument in the function call .
def favourite_book(title):
  """Display a message about my favourite book."""
  print(f"\nMy favourite books is {title.title()}.")

favourite_book("Bhagwad Geeta")

#8-3. T-Shirt: Write a function called make_shirt() that accepts a size and the text of a message that should be printed on the shirt . The function should print a sentence summarizing the size of the shirt and the message printed on it.Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments .
def make_shirt(size, message):
  """Display the size of the shirt and the message."""
  print(f"\nThe size of the shirt is {size} and the message is {message}.")

make_shirt('M', 'I love Python') # Using positional argument

make_shirt(size = 'M', message = 'I love Python') # Using keyword argument

#8-4. Large Shirts: Modify the make_shirt() function so that shirts are large by default with a message that reads I love Python . Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message .
def make_shirt(size = 'L', message = 'I love Python'):
  """Display the size of the shirt and the message."""
  print(f"\nThe size of the shirt is {size} and the message is {message}.")

make_shirt(size = 'M', message = 'I love Python')
make_shirt(size = 'S', message = 'I am a Billionare')

#8-5. Cities: Write a function called describe_city() that accepts the name of a city and its country . The function should print a simple sentence, such as Reykjavik is in Iceland . Give the parameter for the country a default value . Call your function for three different cities, at least one of which is not in the default country .
def describe_city(city, country = 'India'):
  """Display the name of the city and where it is located."""
  print(f"\n{city.title()} is in {country.title()}.")

describe_city('vrindavan')
describe_city('ayodhya')
describe_city('sydney', country = 'australia')

#8-6. City Names: Write a function called city_country() that takes in the name of a city and its country . The function should return a string formatted like this: "Santiago, Chile". Call your function with at least three city-country pairs, and print the value that’s returned .
def city_country(city, country):
  """Displays the name of the city and the country"""
  print(f"\n{city.title()}, {country.title()}")

city_country('santiago', 'chile')

#8-7. Album: Write a function called make_album() that builds a dictionary describing a music album . The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information . Use the function to make three dictionaries representing different albums . Print each return value to show that the dictionaries are storing the album information correctly . Add an optional parameter to make_album() that allows you to store the number of tracks on an album . If the calling line includes a value for the num- ber of tracks, add that value to the album’s dictionary . Make at least one new function call that includes the number of tracks on an album .
def make_album(artist_name, album_title, tracks = ''):
  """Displays the artist name and the album title."""
  artist = {'artist_name': artist_name, 'album_title': album_title}
  return artist

artists = make_album('honey singh', 'desi kalakar')
print(artists)

def make_album(artist_name, album_title, tracks = ''):
  """Displays the artist name and the album title."""
  artist = {'artist_name': artist_name, 'album_title': album_title}
  if tracks:
    artist['tracks'] = tracks
  return artist

artists = make_album('honey singh', 'desi kalakar', tracks = '8')
print(artists)

#8-8. User Albums: Start with your program from Exercise 8-7 . Write a while loop that allows users to enter an album’s artist and title . Once you have that information, call make_album() with the user’s input and print the dictionary that’s created . Be sure to include a quit value in the while loop .
def make_album(artist_name, album_title, tracks = ''):
  """Displays the artist name and the album title."""
  artist = {'artist_name': artist_name, 'album_title': album_title}
  return artist

while True:
  print("\nPlease enter the artist name and album title:")
  print("Enter 'q' at any time to quit.")
  artist_name = input('Artist name: ')
  if artist_name == 'q':
    break
  album_title = input('Album title: ')
  if album_title == 'q':
    break

  artist_info = make_album(artist_name, album_title)
  print(artist_info)
  

#8-9. Magicians: Make a list of magician’s names . Pass the list to a function called show_magicians(), which prints the name of each magician in the list .
def show_magicians(magicians):
  """Displays the names of magicians in the list."""
  print("\nThe magicians are:")
  for magician in magicians:
    print({magician.title()})
    
magicians = ['david blaine', 'harry houdini', 'steve jobs']
show_magicians(magicians)

#8-10. Great Magicians: Start with a copy of your program from Exercise 8-9 . Write a function called make_great() that modifies the list of magicians by add- ing the phrase the Great to each magician’s name . Call show_magicians() to see that the list has actually been modified .
def make_great(magicians):
  """Adds 'The Great' to each magician's name."""
  great_magicians = []
  for magician in magicians:
    great_magician = 'The Great' + magician
    great_magicians.append(great_magician)
    return great_magicians

magicians = ['david blaine', 'harry houdini', 'steve jobs']
great_magicians = make_great(magicians)

def show_magicians(magicians):
  """Displays the names of magicians in the list."""
  print("\nThe magicians are:")
  for magician in magicians:
    print(magician.title())
show_magicians(great_magicians)

    
#8-11. Unchanged Magicians: Start with your work from Exercise 8-10 . Call the function make_great() with a copy of the list of magicians’ names . Because the original list will be unchanged, return the new list and store it in a separate list . Call show_magicians() with each list to show that you have one list of the origi- nal names and one list with the Great added to each magician’s name .
def make_great(magicians):
  """Add 'the Great' to each magician's name."""
  great_magicians = []
  for magician in magicians:
    great_magician = magician + ' the Great'
    great_magicians.append(great_magician)
  return great_magicians
magicians = ['david blaine', 'harry houdini', 'steve jobs']
great_magicians = make_great(magicians.copy())
show_magicians(magicians)
show_magicians(great_magicians)

# 8-12. Sandwiches: Write a function that accepts a list of items a person wants on a sandwich . The function should have one parameter that collects as many items as the function call provides, and it should print a summary of the sand- wich that is being ordered . Call the function three times, using a different number of arguments each time .
def make_sandwich(*items):
  """Displays the items on the sandwich."""
  print(items)

print("The items on the sandwich are:")
make_sandwich('ham', 'cheese', 'tomato')
make_sandwich('veggie','sauce', 'mayo', 'lettuce')

# 8-13. User Profile: Start with a copy of user_profile.py from page 153 . Build a profile of yourself by calling build_profile(), using your first and last names and three other key-value pairs that describe you .
def build_profile(first, last, **user_info):
  """Build a dictionary containing everything we know about a user."""
  profile = {}
  user_info['first_name'] = first
  user_info['last_name'] = last
  return user_info

user_profile = build_profile('yuvraj', 'pradhan', location = 'champua', country = 'india', age = '20')

#8-14. Cars: Write a function that stores information about a car in a dictionary . The function should always receive a manufacturer and a model name . It should then accept an arbitrary number of keyword arguments . Call the func- tion with the required information and two other name-value pairs, such as a color or an optional feature . Your function should work for a call like this one:
def cars(manufacturer, model, **car_info):
  """Displays information about the car."""
  car_info['manufacturer'] = manufacturer
  car_info['model'] = model
  return car_info

car = cars('toyota', 'corolla', color = 'red', year = '2020')
print(car)

#8-15. Printing Models: Put the functions for the example print_models.py in a separate file called printing_functions.py . Write an import statement at the top of print_models.py, and modify the file to use the imported functions .
import printing_functions

unprinted_designs = ['ring', 'bag', 'shoes']

#8-16. Imports: Using a program you wrote that has one function in it, store that function in a separate file . Import the function into your main program file, and call the function using each of these approaches:
    # import module_name
    # from module_name import function_name
    # from module_name import function_name as fn import          module_name as mn
    # from module_name import *
import car

from car import cars

from car import cars as c 

import car as cu

from car import*

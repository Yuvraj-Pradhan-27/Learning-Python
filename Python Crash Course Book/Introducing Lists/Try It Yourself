#3.1 Names: Store the names of a few of your friends in a list called names. Print each person's name by accessing each element in the list, one at a time.

names = ['Radha', 'Krishna', 'Shiva', 'Ganesh']
print(names[0])
print(names[1])
print(names[2])
print(names[3])

#3.2 Greetings: Start with the list you used in the previous exercise, but instead of just printing each person's name, print a message to them. The text of each message should be the same, but each message should be personalized with the person's name.

names = ['Radha', 'Krishna', 'Shiva', 'Ganesh']
print(f"\nHello {names[0]}, I always remember you.)")
print(f"Hello {names[1]}, You are the bestest friend of mine.)")
print(f"Hello {names[2]}, Please give me power and concentration.)")
print(f"Hello {names[3]}, You are my cutest friend, I always love you.)")

#3.3 Your own list: Think of your favourite mode of transportation, and make a list that stores several examples. Use your list to print a series of statements about these items, such as "I would like to own a porsche"

my_cars = ['Urus', 'Porsche GT3 Rs', 'Rolls Royace Cullinan', 'BMW XM']
print(f"\nI have an {my_cars[0]} and I love it!")
print(f"I have a {my_cars[1]} and it's in my garage.")
print(f"I have a {my_cars[2]} and it's my favourite one!")
print(f"I have a {my_cars[3]} and it has the best mileage.")

#3.4 Guest List: If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you would like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner.

guest = ['Radha', 'Krishna', 'Shiva']
print(f"\nHello {guest[0]}, I would like to invire you to dinner.")
print(f"Hello {guest[1]}, I would like to invite you to dinner.")
print(f"Hello {guest[2]}, I would like to invite you to dinner.")

#3.5 Changing Guest list: You just heard that one of your guests can't make the dinner, so you need to send out a new set of invitations. You'll have to think of someone else to invite. 
  #--Start your program with your original list, add print() call at the end to show the list. Stating the name who can't make it
  #--Modify your list, replacing the name of the guest who can't make it with the name of the new person you are inviting.
  #--Print a second set of invitation messages, one for each person who is still in your list.

guest = ['Radha', 'Krishna', 'Shiva']
print(f"I had called {guest}, but unfortunately{guest[2]} will not make it to the dinner.")

guest[2] = 'Ganesha'

print(f"\nHello {guest[0]}, I would like to invite you to dinner.")
print(f"Hello {guest[1]}, I would like to invite you to dinner.")
print(f"Hello {guest[2]}, I would like to invite you to dinner.")

#3.6 More Guests: You just found a bigger dinner table, so now more space is available. Think of three more guests to invite to dinner.
  #--Start with your program from Exercise 3.4 and 3.5. Add a print() call to the end of your program informing people that you found a bigger dinner table.
  #--Use insert()to add one new guest to the beggining of your list.
  #Use insert() to add one new guest to the middle of your list.
  #Use append() to add one new guest to the end of your list.
  #Print a new set of invitation messages, one for each person in your list.

guest = ['Radha', 'Krishna', 'Ganesha']
guest.insert(0, 'Hanuman')
guest.insert(2, 'Parvati')
guest.append('Shiva')
print(guest)
print(f"\nHello {guest[0]}, I would like to invite you to dinner.")
print(f"Hello {guest[1]}, I would like to invite you to dinner.")
print(f"Hello {guest[2]}, I would like to invite you to dinner.")
print(f"Hello {guest[3]}, I would like to invite you to dinner.")
print(f"Hello {guest[4]}, I would like to invite you to dinner.")
print(f"Hello {guest[5]}, I would like to invite you to dinner.")

#3.7 Shrinking Guest List: You just found out that the new dinner table won't arrive in the time for dinner, and now you have space for only two guests.
  #--Start with your program from Exercise 3.6. Add a new line that prints a message saying that you can invite only two people for dinner
  #Use pop() to remove guests from your list one at a time until only two names remain in your list. Each time you pop a name from your list. Print a message to each person letting them know you're sorry you can't invite them to dinner.
  #Print a message to each two person letting them know they're still invited.
  #Use del to remove the last two names from your list, so you have an empty list. Print your list to make sure you actually have an empty list at the end of your program.

guest = ['Hanuman', 'Radha', 'Parvati', 'Krishna', 'Ganesha', 'Shiva']
popped_guest_1 = guest.pop()
print(f"\nSorry {popped_guest_1}, you can't come to dinner, the dinner table is not available this time.")
popped_guest_2 = guest.pop()
print(f"Sorry {popped_guest_2}, you can't come to dinner, the dinner table is not available this time.")
popped_guest_3 = guest.pop()
print(f"Sorry {popped_guest_3}, you can't come to dinner, the dinner table is not available this time.")
popped_guest_4 = guest.pop()
print(f"Sorry {popped_guest_4}, you can't come to dinner, the dinner table is not available this time.")

print(guest)
print(f"\nHello {guest[0]}, you are still invited to dinner.")
print(f"Hello {guest[1]}, you are still invited to dinner.")

del guest[0]
del guest[0]
print(guest)

#3.8 Seeing the world: Think of at least five places in the world you would like to visit.
  #--Store the locations in a list. Make sure the list is not in alphabetical order.
  #--Print your list in the original order.
  #--Use sorted() to print your list in alphabetical order without modifying the actual list.
  #--Show that your list is still in the original order by printing it.
  #--Use sorted() to print your list in reverse alphabetical order without changing the order of the original list.
  #--Show that your list is still in its original order by printing it again.
  #--Use reverse() to change the order of your list. Print the list to show that its order has changed.
  #--Use reverse() to change the order of your list again. Print the list to show it's back to its original order.
  #--Use sort() to change your list so it's stored in alphabetical order. Print the list to show that
  #--Use sort() to change your list so it's stored in reverse alphabetical order. Print the list to show that its

places = ['Vrindavan', 'Kedarnath', 'Dwarka', 'Ayodhya', 'Ajanta' ]
print(sorted(places))
print(places)

print(sorted(places, reverse = True))
print(places)

places.reverse()
print(places)

places.reverse()
print(places)

places.sort()
print(places)

places.sort(reverse = True)
print(places)

#3.9 Dinner Guests: Working with one of the programs from Exercises 3.4 to 3.7, use len() to print a message indicating the number of people you are inviting to dinner.

guest = ['Radha', 'Krishna', 'Ganesha', 'Shiva', 'Parvati', 'Hanuman']
print(len(guest))

#3.10 Every Function: Think of something you could store in a list. For example, you could make a list of mountains, rivers, countries, cities, languages, or anything else you'd like. Write a program that creates a list containing these items and then uses each function introduced in this chapter at least once.

guest = ['Radha', 'Krishna', 'Ganesha', 'Shiva', 'Parvati', 'Hanuman']
print(guest[0])

guest[2] = 'Kartikeya'
print(guest)

guest.append('Ganesh')
print(guest)

guest.insert(0, 'Premanand Maharaj')
print(guest)

del guest[4]
print(guest)

guest.pop()
print(guest)

guest.pop(4)
print(guest)

guest.remove('Hanuman')
print(guest)

guest.sort()
print(guest)

guest.sort(reverse = True)
print(guest)

print(sorted(guest))

print(len(guest))

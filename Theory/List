li = [1,2,3,4,5]
li2 = [5,6,7,8,9]
li3 = ['a', 'b', 'c']

amazon_cart = ["apple", "banana", "cherry"]
print(thislist)

#List Length
thislist = ["apple", "banana", "cherry"]
print(len(thislist)) returns 3

#List Items - Data Types
list1 = ["apple", "banana", "cherry"]
list2 = [1, 5, 7, 9, 3]
list3 = [True, False, False]

#type()
mylist = ["apple", "banana", "cherry"]
print(type(mylist))

#The list() Constructor
thislist = list(("apple", "banana", "cherry")) # note the double round-brackets
print(thislist)

#List Slicing
amazon_list = ['sunglass',
               'belt',
               'shoes',
               'Tie']
amazon_cart[0] = 'laptop
new_cart = amazon_cart[0:3]
print(new_cart)

#Matrix
This consists 2d data mostly used for image processing, very useful in machine learning

matrix = [
[1,2,3],
[1,2,3],
[1,2,3],
]

print(matrix[0][1]) 
gives 2

#List Methods
_adding
list = ["1","2","3","4","5"]
list.append("6")
new_list = list
print(new_list)

_insert
thislist = ["1", "2", "3"]
thislist.insert(3, "4")
print(thislist)

_extend list
list = ["1", "2", "3", "4", "5"]
add_to_list = ["6", "7", "8"]
list.extend(add_to_list)
print(list)

#Remove Specified Item
The remove() method removes the specified item.

thislist = ["apple", "banana", "cherry"]
thislist.remove("banana")
print(thislist)

#Remove Specified Index
The pop() method removes the specified index.

list = ["1", "2", "3", "4", "5"]
list.pop(3)
print(list)

#Clear the List
The clear() method empties the list.
The list still remains, but it has no content.

thislist = ["apple", "banana", "cherry"]
thislist.clear()
print(thislist)

#Loop Through a List
You can loop through the list items by using a for loop:

list = ["1", "2", "3", "4", "5"]
for x in this list:
     print(x)

#Using a While Loop
You can loop through the list items by using a while loop.
Use the len() function to determine the length of the list, then start at 0 and loop your way through the list items by referring to their indexes.
Remember to increase the index by 1 after each iteration.

#List Comprehension
List comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list.

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = []
for x in fruits:
  if "a" in x:
    newlist.append(x)
print(newlist)

#sort lists
Sort List Alphanumerically
List objects have a sort() method that will sort the list alphanumerically, ascending, by default:

_alphabetically
thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort()
print(thislist)

_numerically
thislist = [100, 50, 65, 82, 23]
thislist.sort()
print(thislist)

_descending
To sort descending, use the keyword argument reverse = True:

thislist = [100, 50, 60, 49]
thislist.sort(reverse = True)
print(thislist)

#Copy a List
You cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1, and changes made in list1 will automatically also be made in list2.
There are ways to make a copy, one way is to use the built-in List method copy().

mylist = ["apple", "bamama", "orange", "pineapple"]
this_list = mylist.copy()
print(this_list)

#Join list
list1 = ["1", "2", "3", "4", "5"]
list2 = ["6", "7", "8", "9", "10"]
list3 = list1 + list2
print(list3)

list1 = ["1", "2", "3", "4", "5"]
list2 = ["6", "7", "8", "9", "10"]
list1.extend(list2)
list3 = list1
print(list3)

Method	             Description
append()	           Adds an element at the end of the list
clear()	             Removes all the elements from the list
copy()	             Returns a copy of the list
count()	             Returns the number of elements with the specified value
extend()	           Add the elements of a list (or any iterable), to the end of the current list
index()	             Returns the index of the first element with the specified value
insert()	           Adds an element at the specified position
pop()                Removes the element at the specified position
remove()	           Removes the item with the specified value
reverse()	           Reverses the order of the list
sort()	             Sorts the list
